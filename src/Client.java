import javax.swing.JFrame;
import java.io.DataInputStream;
import java.io.DataOutputStream;
import java.io.IOException;
import java.net.InetSocketAddress;
import java.net.Socket;
import java.net.SocketException;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.GroupLayout.Alignment;
import javax.swing.JButton;
import javax.swing.GroupLayout;
import javax.swing.LayoutStyle.ComponentPlacement;
import javax.swing.JLabel;
import javax.swing.JOptionPane;
import javax.swing.JScrollPane;
import javax.swing.JTextArea;
import javax.swing.JSpinner;
import javax.swing.JTextField;

public class Client extends JFrame {
	private static final int SERVER_TIME_OUT = 10000;
	public static Socket socket;

	public static DataOutputStream dos;
	
	private JButton jButton1;
	private JButton jButton2;
	private JScrollPane jScrollPane1;
	private JTextField IP;
	
	public int port;
	private static javax.swing.JTextArea taHistory;
	public String address;
	public JTextArea taMessanger;
	private JTextField Port;

	public Client() {
		setResizable(false);
		setTitle("client");
		initComponents();
	}

	/**
	 * This method is called from within the constructor to initialize the form.
	 * WARNING: Do NOT modify this code. The content of this method is always
	 * regenerated by the Form Editor.
	 */
	@SuppressWarnings("unchecked")

	private void initComponents() {

		jScrollPane1 = new javax.swing.JScrollPane();
		taHistory = new javax.swing.JTextArea();
		jButton1 = new javax.swing.JButton();
		IP = new javax.swing.JTextField();
		jButton2 = new javax.swing.JButton();

		setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

		taHistory.setEditable(false);
		taHistory.setColumns(20);
		taHistory.setRows(5);
		jScrollPane1.setViewportView(taHistory);

		jButton1.setText("send");
		jButton1.addActionListener(new java.awt.event.ActionListener() {
			public void actionPerformed(java.awt.event.ActionEvent evt) {
				jButton1ActionPerformed(evt);
			}
		});

		IP.setText("192.168.1.2\r\n");

		jButton2.setText("connect\r\n");
		jButton2.addActionListener(new java.awt.event.ActionListener() {
			public void actionPerformed(java.awt.event.ActionEvent evt) {
				jButton2ActionPerformed(evt);
			}
		});

		JLabel lblIpAddress = new JLabel("IP address");

		JScrollPane scrollPane = new JScrollPane();

		JLabel lblPort = new JLabel("Port");

		Port = new JTextField();
		Port.setText("1234");
		Port.setColumns(10);

		javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
		layout.setHorizontalGroup(
				layout.createParallelGroup(Alignment.TRAILING)
						.addGroup(layout.createSequentialGroup().addContainerGap()
								.addGroup(layout.createParallelGroup(Alignment.LEADING)
										.addComponent(scrollPane, GroupLayout.DEFAULT_SIZE, 732, Short.MAX_VALUE)
										.addGroup(layout.createSequentialGroup().addGap(0, 677, Short.MAX_VALUE)
												.addComponent(jButton1))
										.addGroup(layout.createSequentialGroup()
												.addComponent(jScrollPane1, GroupLayout.PREFERRED_SIZE, 727,
														GroupLayout.PREFERRED_SIZE)
												.addGap(0, 5, Short.MAX_VALUE))
										.addGroup(layout.createSequentialGroup().addComponent(lblIpAddress)
												.addPreferredGap(ComponentPlacement.RELATED)
												.addComponent(IP, GroupLayout.PREFERRED_SIZE, 317,
														GroupLayout.PREFERRED_SIZE)
												.addGap(134).addComponent(lblPort)
												.addPreferredGap(ComponentPlacement.RELATED)
												.addComponent(Port, GroupLayout.DEFAULT_SIZE, 125, Short.MAX_VALUE)
												.addPreferredGap(ComponentPlacement.RELATED).addComponent(jButton2)))
								.addContainerGap()));
		layout.setVerticalGroup(layout.createParallelGroup(Alignment.LEADING)
				.addGroup(layout.createSequentialGroup().addContainerGap()
						.addComponent(jScrollPane1, GroupLayout.PREFERRED_SIZE, 188, GroupLayout.PREFERRED_SIZE)
						.addPreferredGap(ComponentPlacement.RELATED, 12, Short.MAX_VALUE)
						.addGroup(layout.createParallelGroup(Alignment.BASELINE)
								.addComponent(IP, GroupLayout.PREFERRED_SIZE, GroupLayout.DEFAULT_SIZE,
										GroupLayout.PREFERRED_SIZE)
								.addComponent(jButton2).addComponent(lblIpAddress).addComponent(lblPort)
								.addComponent(Port, GroupLayout.PREFERRED_SIZE, GroupLayout.DEFAULT_SIZE,
										GroupLayout.PREFERRED_SIZE))
						.addGap(13).addComponent(scrollPane, GroupLayout.PREFERRED_SIZE, 85, GroupLayout.PREFERRED_SIZE)
						.addPreferredGap(ComponentPlacement.RELATED).addComponent(jButton1).addContainerGap()));

		taMessanger = new JTextArea();
		scrollPane.setViewportView(taMessanger);
		getContentPane().setLayout(layout);

		pack();
	}// </editor-fold>

	private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {

		String msgout = "";
		msgout = taMessanger.getText();
		try {
			dos = new DataOutputStream(socket.getOutputStream());
			dos.writeUTF(msgout);
			// TODO add your handling code here:
		} catch (IOException ex) {
			Logger.getLogger(Client.class.getName()).log(Level.SEVERE, null, ex);
		}
	}

	private void jButton2ActionPerformed(java.awt.event.ActionEvent evt) {
		connect();
	}

	/**
	 * @param args
	 *            the command line arguments
	 */
	public static void main(String args[]) {
		/* Set the Nimbus look and feel */
		// <editor-fold defaultstate="collapsed" desc=" Look and feel setting
		// code (optional) ">
		/*
		 * If Nimbus (introduced in Java SE 6) is not available, stay with the
		 * default look and feel. For details see
		 * http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.
		 * html
		 */
		try {
			for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
				if ("Nimbus".equals(info.getName())) {
					javax.swing.UIManager.setLookAndFeel(info.getClassName());
					break;
				}
			}
		} catch (ClassNotFoundException ex) {
			java.util.logging.Logger.getLogger(Client.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
		} catch (InstantiationException ex) {
			java.util.logging.Logger.getLogger(Client.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
		} catch (IllegalAccessException ex) {
			java.util.logging.Logger.getLogger(Client.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
		} catch (javax.swing.UnsupportedLookAndFeelException ex) {
			java.util.logging.Logger.getLogger(Client.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
		}
		// </editor-fold>

		/* Create and display the form */
		java.awt.EventQueue.invokeLater(new Runnable() {
			public void run() {
				new Client().setVisible(true);

			}
		});
	}

	// Variables declaration - do not modify
	public void connect() {

		try {
			socket = new Socket();

			try {
				socket.setSoTimeout(SERVER_TIME_OUT);
			} catch (SocketException e) {
				e.printStackTrace();
			}
			// System.out.println("PLEASE ENTER IP ADDRESS");
			address = IP.getText();
			port = Integer.parseInt(Port.getText());
			// System.out.println("CONNECTING...");
			try {
				socket.connect(new InetSocketAddress(address, port));
			} catch (IOException e) {
				
			}
			DataInputStream dis = new DataInputStream(socket.getInputStream());
			JOptionPane.showMessageDialog(null, "Connected");

			String msgin = "";
			while (true) {
				
				msgin = dis.readUTF();
				taHistory.append(msgin);

			}
		} catch (Exception ex) {
			ex.printStackTrace();
			JOptionPane.showMessageDialog(null, "Cannot connect");
		}

	}
}
